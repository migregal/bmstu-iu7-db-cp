// Code generated by mockery v2.10.4. DO NOT EDIT.

package mock

import (
	repositories "neural_storage/cube/core/ports/repositories"

	mock "github.com/stretchr/testify/mock"

	weights "neural_storage/cube/core/entities/structure/weights"
)

// ModelStructWeightsInfoRepository is an autogenerated mock type for the ModelStructWeightsInfoRepository type
type ModelStructWeightsInfoRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: modelId, info
func (_m *ModelStructWeightsInfoRepository) Add(modelId string, info weights.Info) error {
	ret := _m.Called(modelId, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, weights.Info) error); ok {
		r0 = rf(modelId, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: weightsId
func (_m *ModelStructWeightsInfoRepository) Delete(weightsId string) error {
	ret := _m.Called(weightsId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(weightsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filter
func (_m *ModelStructWeightsInfoRepository) Find(filter repositories.StructWeightsInfoFilter) ([]*weights.Info, error) {
	ret := _m.Called(filter)

	var r0 []*weights.Info
	if rf, ok := ret.Get(0).(func(repositories.StructWeightsInfoFilter) []*weights.Info); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*weights.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repositories.StructWeightsInfoFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: weightsId
func (_m *ModelStructWeightsInfoRepository) Get(weightsId string) (*weights.Info, error) {
	ret := _m.Called(weightsId)

	var r0 *weights.Info
	if rf, ok := ret.Get(0).(func(string) *weights.Info); ok {
		r0 = rf(weightsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weights.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(weightsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: info
func (_m *ModelStructWeightsInfoRepository) Update(info weights.Info) error {
	ret := _m.Called(info)

	var r0 error
	if rf, ok := ret.Get(0).(func(weights.Info) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
