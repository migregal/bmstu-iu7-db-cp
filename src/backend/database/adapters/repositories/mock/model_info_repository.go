// Code generated by mockery v2.10.4. DO NOT EDIT.

package mock

import (
	model "neural_storage/cube/core/entities/model"

	mock "github.com/stretchr/testify/mock"

	repositories "neural_storage/cube/core/ports/repositories"

	structure "neural_storage/cube/core/entities/structure"
)

// ModelInfoRepository is an autogenerated mock type for the ModelInfoRepository type
type ModelInfoRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: info
func (_m *ModelInfoRepository) Add(info model.Info) error {
	ret := _m.Called(info)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Info) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: modelId
func (_m *ModelInfoRepository) Delete(modelId string) error {
	ret := _m.Called(modelId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(modelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filter
func (_m *ModelInfoRepository) Find(filter repositories.ModelInfoFilter) ([]*model.Info, error) {
	ret := _m.Called(filter)

	var r0 []*model.Info
	if rf, ok := ret.Get(0).(func(repositories.ModelInfoFilter) []*model.Info); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repositories.ModelInfoFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: modelId
func (_m *ModelInfoRepository) Get(modelId string) (*model.Info, error) {
	ret := _m.Called(modelId)

	var r0 *model.Info
	if rf, ok := ret.Get(0).(func(string) *model.Info); ok {
		r0 = rf(modelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(modelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStructure provides a mock function with given fields: modelId
func (_m *ModelInfoRepository) GetStructure(modelId string) (*structure.Info, error) {
	ret := _m.Called(modelId)

	var r0 *structure.Info
	if rf, ok := ret.Get(0).(func(string) *structure.Info); ok {
		r0 = rf(modelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structure.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(modelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
