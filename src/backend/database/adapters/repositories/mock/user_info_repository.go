// Code generated by mockery v2.10.4. DO NOT EDIT.

package mock

import (
	repositories "neural_storage/cube/core/ports/repositories"

	mock "github.com/stretchr/testify/mock"

	user "neural_storage/cube/core/entities/user"
)

// UserInfoRepository is an autogenerated mock type for the UserInfoRepository type
type UserInfoRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *UserInfoRepository) Add(_a0 user.Info) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.Info) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *UserInfoRepository) Delete(_a0 user.Info) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.Info) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filter
func (_m *UserInfoRepository) Find(filter repositories.UserInfoFilter) ([]*user.Info, error) {
	ret := _m.Called(filter)

	var r0 []*user.Info
	if rf, ok := ret.Get(0).(func(repositories.UserInfoFilter) []*user.Info); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repositories.UserInfoFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *UserInfoRepository) Get(_a0 user.Info) (user.Info, error) {
	ret := _m.Called(_a0)

	var r0 user.Info
	if rf, ok := ret.Get(0).(func(user.Info) user.Info); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.Info)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.Info) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *UserInfoRepository) Update(_a0 user.Info) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.Info) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
